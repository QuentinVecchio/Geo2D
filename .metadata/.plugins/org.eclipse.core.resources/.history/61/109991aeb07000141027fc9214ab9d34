package Construction;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import Erreur.Erreur;

public class ControllerConstruction 
{
	private String s;
	private ConstructeurCOR COR;
	/*
	 * Prend en paramètre le string contenant tout le xml
	 */
	public ControllerConstruction(String s)
	{
			
	}
	
	public void constructionListeConstructeurs()
	{
		/*
		 * Création de tous les constructeurs
		 */
		COR = new ConstructeurPoint(null);
		//COR = new ConstructeurSegment(COR);
		//COR = new ConstructeurCarre(COR);
	}
	
	public void appelConstructeurs()
	{
		constructionListeConstructeurs();
		//Lecture du fichier xml
		final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try 
		{
		    final DocumentBuilder builder = factory.newDocumentBuilder();
		    final Document document= builder.parse(f);
		    final Element racine = document.getDocumentElement();
		    //Test pour savoir si le fichier est bon ou non
		    if(racine.getNodeName().equalsIgnoreCase("groupe"))
		    {
		    	final NodeList racineNoeuds = racine.getChildNodes();
		    	final int nbRacineNoeuds = racineNoeuds.getLength();
		    	for (int i = 0; i<nbRacineNoeuds; i++) {
		    		if(racineNoeuds.item(i).getNodeType() == Node.ELEMENT_NODE) 
		    		{
		    	        final Node personne = racineNoeuds.item(i);
		    	        System.out.println(personne.getNodeName());
		    	    }
		    	}
		    }
		}
		catch (final ParserConfigurationException e) {
		    e.printStackTrace();
		}
		catch (final SAXException e) {
		    e.printStackTrace();
		}
		catch (final IOException e) {
		    e.printStackTrace();
		}
	}
}
